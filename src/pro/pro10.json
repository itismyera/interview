[
  {
    "index": 0.0,
    "title": "用过或很熟悉的设计模式有哪些？",
    "ans": "这个问题看好书写写代码就可以自由发挥了，下面给几个例子。\n\n工厂模式，通过简单工厂生成NPC对象，简单处理的话可通过“字符串匹配”动态创建对象。如果有“反射机制”就可以直接传class来实现。当然可以进一步使用抽象工厂，处理不同的生产对象。\n\n单例，实现全局唯一的一个对象。构造函数、静态指针都是私有的，使用前提前初始化或者加锁来保证线程安全。\n\nAdaptor适配器，代码适配原来的相机移动最后调用的是原来的移动，现在加了适配器继承里面放了当前引擎的摄像机，然后覆盖原来摄像机的移动逻辑。\n\nObserver，一个对象绑定多个观察者，然后这个对象一旦有消息就立刻公布给所有的观察者，观察者可以动态添加或删除。在UE4里面，行为树任务节点请求任务后进入执行状态，然后会立刻注册一个观察者observer到行为树（行为树本身就相当于前面提到的那个对象）的observer数组里面同时绑定一个代理函数。行为树tick检测消息发送给所有观察者，观察者收到消息执行代理函数。"
  },
  {
    "index": 1.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 2.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 3.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 4.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 5.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 6.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 7.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 8.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 9.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 10.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 11.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 12.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 13.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 14.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 15.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 16.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 17.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 18.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 19.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 20.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 21.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 22.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 23.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 24.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 25.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 26.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 27.0,
    "title": "",
    "ans": ""
  },
  {
    "index": 28.0,
    "title": "",
    "ans": ""
  }
]